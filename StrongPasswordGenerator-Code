import tkinter as tk
import random
import string
# Load sound files (ensure these files are in your working directory)

def add_must_include():
    text = must_entry.get()
    if text:
        must_listbox.insert(tk.END, text)
        must_entry.delete(0, tk.END)

def remove_must_include():
    selected_indices = must_listbox.curselection()
    for index in reversed(selected_indices):
        must_listbox.delete(index)

def generate_password():
    try:
        length = int(length_entry.get())
    except ValueError:
        result_entry.config(state="normal")
        result_entry.delete(0, tk.END)
        result_entry.insert(0, "Invalid length!")
        result_entry.config(state="readonly")
       
        return

    # Build the allowed characters pool.
    characters = string.ascii_letters
    if include_numbers.get():
        characters += string.digits
    if include_special.get():
        characters += string.punctuation

    # Get all "must include" substrings from the listbox.
    must_include = list(must_listbox.get(0, tk.END))
    must_total_length = sum(len(s) for s in must_include)

    # If the total length of required substrings exceeds the password length, play error sound.
    if must_total_length > length:
        result_entry.config(state="normal")
        result_entry.delete(0, tk.END)
        result_entry.insert(0, "Must include strings exceed password length!")
        result_entry.config(state="readonly")
       
        return

    # Generate the random part of the password.
    random_length = length - must_total_length
    random_part = ''.join(random.choice(characters) for _ in range(random_length))
    
    # Insert each must-include substring into the random part at random positions.
    password = random_part
    for s in must_include:
        pos = random.randint(0, len(password))
        password = password[:pos] + s + password[pos:]

    # Display the final password in the read-only entry.
    result_entry.config(state="normal")
    result_entry.delete(0, tk.END)
    result_entry.insert(0, password)
    result_entry.config(state="readonly")
   
def copy_password():
    password = result_entry.get()
    root.clipboard_clear()
    root.clipboard_append(password)

# Main window setup.
root = tk.Tk()
root.title("Advanced Password Generator")

# Left frame for generation options and result.
left_frame = tk.Frame(root)
left_frame.grid(row=0, column=0, padx=10, pady=10)

# Password length input.
tk.Label(left_frame, text="Password Length:").grid(row=0, column=0, sticky="w")
length_entry = tk.Entry(left_frame, width=10)
length_entry.grid(row=0, column=1, padx=5, pady=5)
length_entry.insert(0, "12")  # Default length.

# Checkbuttons for including numbers and special characters.
include_numbers = tk.BooleanVar()
tk.Checkbutton(left_frame, text="Include Numbers", variable=include_numbers).grid(row=1, column=0, columnspan=2, sticky="w")
include_special = tk.BooleanVar()
tk.Checkbutton(left_frame, text="Include Special Characters", variable=include_special).grid(row=2, column=0, columnspan=2, sticky="w")

# Button to generate the password.
tk.Button(left_frame, text="Generate Password", command=generate_password).grid(row=3, column=0, columnspan=2, pady=5)

# Entry to display the generated password (set as read-only).
tk.Label(left_frame, text="Generated Password:").grid(row=4, column=0, sticky="w")
result_entry = tk.Entry(left_frame, width=30, state="readonly")
result_entry.grid(row=5, column=0, columnspan=2, padx=5, pady=5)

# Button to copy the password to the clipboard.
tk.Button(left_frame, text="Copy Password", command=copy_password).grid(row=6, column=0, columnspan=2, pady=5)

# Right frame for the "must include" substrings.
right_frame = tk.Frame(root)
right_frame.grid(row=0, column=1, padx=10, pady=10, sticky="ns")

tk.Label(right_frame, text="Must Include Substrings:").grid(row=0, column=0, columnspan=3)

# Listbox with a scrollbar for must-include substrings.
must_listbox = tk.Listbox(right_frame, width=25, height=8)
must_listbox.grid(row=1, column=0, columnspan=2, pady=5)

scrollbar = tk.Scrollbar(right_frame, orient="vertical", command=must_listbox.yview)
scrollbar.grid(row=1, column=2, sticky="ns")
must_listbox.config(yscrollcommand=scrollbar.set)

# Entry for new must-include substring.
must_entry = tk.Entry(right_frame, width=20)
must_entry.grid(row=2, column=0, padx=5, pady=5)

# "+" button to add a new substring.
tk.Button(right_frame, text="+", width=3, command=add_must_include).grid(row=2, column=1, padx=5, pady=5)
# "â€“" button to remove the selected substring.
tk.Button(right_frame, text="-", width=3, command=remove_must_include).grid(row=2, column=2, padx=5, pady=5)

root.mainloop()
